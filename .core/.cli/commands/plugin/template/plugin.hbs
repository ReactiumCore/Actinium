import chalk from 'chalk';
import op from 'object-path';
{{#if sdk}}
import PLUGIN_SDK from './sdk.js';
{{/if}}
{{#if blueprints}}
import PLUGIN_BLUEPRINTS from './blueprints.js';
{{/if}}
{{#if routes}}
import PLUGIN_ROUTES from './routes.js';
{{/if}}

const { CloudRunOptions } = Actinium.Utils;

const PLUGIN = {
    ID: '{{ID}}',
    name: '{{name}}',
    description: '{{description}}',
    order: 100,
    version: {
        actinium: '{{{version.actinium}}}',
        plugin: '{{{version.plugin}}}',
        reactium: '{{{version.reactium}}}',
    },
    bundle: [],
    meta: {
        builtIn: {{builtIn}}
    },
};

{{#if sdk}}
/**
 * ----------------------------------------------------------------------------
 * Extend Actinium SDK
 * ----------------------------------------------------------------------------
 */
Actinium['{{sdk}}'] = op.get(Actinium, '{{sdk}}', PLUGIN_SDK);
{{/if}}

{{#if blueprints}}
const registerBlueprints = (reg = true) => ({ ID }) => {
    if (ID && ID !== PLUGIN.ID) return;
    if (reg === true) PLUGIN_BLUEPRINTS.forEach(bp => Actinium.Blueprint.register(bp.ID, bp));
    else PLUGIN_BLUEPRINTS.forEach(bp => Actinium.Blueprint.unregister(bp.ID));
};

// Start: Blueprints
Actinium.Hook.register('start', registerBlueprints(true));

// Activate: Blueprints
Actinium.Hook.register('activate', registerBlueprints(true));

// Deactivate: Blueprints
Actinium.Hook.register('deactivate', registerBlueprints(false));
{{/if}}

/**
 * ----------------------------------------------------------------------------
 * Plugin registration
 * ----------------------------------------------------------------------------
 */
Actinium.Plugin.register(PLUGIN, {{activate}});

/**
 * ----------------------------------------------------------------------------
 * Hook registration
 * ----------------------------------------------------------------------------
 */
{{#if routes}}
const saveRoutes = async () => {
    for (const route of PLUGIN_ROUTES) {
        await Actinium.Route.save(route);
    }
};

// Update routes on startup
Actinium.Hook.register('start', async () => {
    if (Actinium.Plugin.isActive(PLUGIN.ID)) await saveRoutes();
});

// Update routes on plugin activation
Actinium.Hook.register('activate', async ({ ID }) => {
    if (ID === PLUGIN.ID) await saveRoutes();
});

// Update routes on plugin update
Actinium.Hook.register('update', async ({ ID }) => {
    if (ID === PLUGIN.ID) await saveRoutes();
});

// Remove routes on deactivation
Actinium.Hook.register('deactivate', async ({ ID }) => {
    if (ID === PLUGIN.ID) {
        for (const route of PLUGIN_ROUTES) {
            await Actinium.Route.delete(route);
        }
    }
});
{{/if}}

{{#if collections}}
Actinium.Hook.register('schema', async () => {
    if (!Actinium.Plugin.isActive(PLUGIN.ID)) return;

    const PLUGIN_SCHEMA = await import('./schema.js');
    PLUGIN_SCHEMA.forEach((item) => {
        const { actions = {}, collection, schema = {} } = item;

        Actinium.Collection.register(collection, actions, schema);

        Object.keys(actions).forEach(action =>
            Actinium.Capability.register(
                String(`${collection}.${action}`).toLowerCase()
            )
        );
    });
});
{{/if}}

Actinium.Hook.register('warning', () => {
    if (!Actinium.Plugin.isActive(PLUGIN.ID)) return;

    // Your bootstrap warning messages here
    // WARN('');
    // WARN(chalk.cyan.bold('Warning:'), 'about something');
});

Actinium.Hook.register('install', ({ ID }) => {
    if (ID !== PLUGIN.ID) return;

    // Your install code here
});

Actinium.Hook.register('uninstall', async ({ ID }) => {
    if (ID !== PLUGIN.ID) return;

    // Your uninstall code here
});

Actinium.Hook.register('activate', ({ ID }) => {
    if (ID !== PLUGIN.ID) return;

    // Your activation code here
});

{{#if cloud}}
/**
 * ----------------------------------------------------------------------------
 * Cloud Functions
 * ----------------------------------------------------------------------------
 */
{{#each cloud}}
// {{this}}
Actinium.Cloud.define(PLUGIN.ID, '{{this}}', req => {

    // Your cloud function here

    // -------------------------------------------------
    // Example
    // -------------------------------------------------
    // const { params, user } = req;
    // const options = CloudRunOptions(req);
    // return Actinium.MySdk.get(params, user, options);
});

{{/each}}
{{/if}}

{{#if afterFind}}
/**
 * ----------------------------------------------------------------------------
 * afterFind hooks
 * ----------------------------------------------------------------------------
 */

{{#each afterFind}}
Actinium.Cloud.afterFind('{{this.collection}}', async req => {
    await Actinium.Hook.run('{{this.hook}}-after-find', req);
    return req.objects;
});
{{/each}}
{{/if}}

{{#if afterDelete}}
/**
 * ----------------------------------------------------------------------------
 * afterDelete hooks
 * ----------------------------------------------------------------------------
 */

{{#each afterDelete}}
Actinium.Cloud.afterDelete('{{this.collection}}', async req => {
    await Actinium.Hook.run('{{this.hook}}-after-delete', req);
});
{{/each~}}
{{/if}}

{{#if afterSave}}
/**
 * ----------------------------------------------------------------------------
 * afterSave hooks
 * ----------------------------------------------------------------------------
 */

{{#each afterSave}}
Actinium.Cloud.afterSave('{{this.collection}}', async req => {
    await Actinium.Hook.run('{{this.hook}}-after-save', req);
});
{{/each}}
{{/if}}

{{#if beforeDelete}}
/**
 * ----------------------------------------------------------------------------
 * beforeDelete hooks
 * ----------------------------------------------------------------------------
 */

{{#each beforeDelete}}
Actinium.Cloud.beforeDelete('{{this.collection}}', async req => {
    await Actinium.Hook.run('{{this.hook}}-before-delete', req);
});
{{/each}}
{{/if}}

{{#if beforeSave}}
/**
 * ----------------------------------------------------------------------------
 * beforeSave hooks
 * ----------------------------------------------------------------------------
 */

{{#each beforeSave}}
Actinium.Cloud.beforeSave('{{this.collection}}', async req => {
    await Actinium.Hook.run('{{this.hook}}-before-save', req);
});

{{/each}}
{{/if}}
